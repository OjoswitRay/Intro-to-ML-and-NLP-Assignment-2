import pandas as pd
import numpy as np
import re
import gensim.downloader as api
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import nltk

# Download required NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Load the dataset (assuming CSV with 'Label' and 'Message' columns)
df = pd.read_csv('spam.csv', encoding='latin-1')[['v1', 'v2']]
df.columns = ['Label', 'Message']

# Preprocessing
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z]', ' ', text)
    tokens = word_tokenize(text)
    tokens = [word for word in tokens if word not in stop_words and len(word) > 1]
    return tokens

df['Tokens'] = df['Message'].apply(preprocess_text)

# Load Google News Word2Vec (takes a while and ~1.5GB of RAM)
print("Loading Word2Vec model...")
w2v_model = api.load("word2vec-google-news-300")

# Vectorize messages
def get_vector(tokens):
    vectors = [w2v_model[word] for word in tokens if word in w2v_model]
    if vectors:
        return np.mean(vectors, axis=0)
    else:
        return np.zeros(300)  # zero vector if none found

df['Vector'] = df['Tokens'].apply(get_vector)

# Prepare data
X = np.vstack(df['Vector'].values)
y = df['Label'].map({'ham': 0, 'spam': 1})

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train classifier
clf = LogisticRegression(max_iter=1000)
clf.fit(X_train, y_train)

# Evaluate
y_pred = clf.predict(X_test)
print("Test Accuracy:", accuracy_score(y_test, y_pred))

# Prediction function
def predict_message_class(model, w2v_model, message):
    tokens = preprocess_text(message)
    vector = get_vector(tokens)
    pred = model.predict([vector])[0]
    return 'spam' if pred == 1 else 'ham'

# Example
example = "Congratulations! You've won a $1000 Walmart gift card. Click here to claim now."
print("Prediction for example message:", predict_message_class(clf, w2v_model, example))
